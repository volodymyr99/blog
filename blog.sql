-- phpMyAdmin SQL Dump
-- version 5.1.0
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Июн 22 2023 г., 07:35
-- Версия сервера: 8.0.24
-- Версия PHP: 7.4.21

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `blog`
--

-- --------------------------------------------------------

--
-- Структура таблицы `comments`
--

CREATE TABLE `comments` (
  `id` int NOT NULL,
  `comment` tinytext NOT NULL,
  `id_post` int NOT NULL,
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

--
-- Дамп данных таблицы `comments`
--

INSERT INTO `comments` (`id`, `comment`, `id_post`, `created_at`) VALUES
(1, 'Стаття круть', 1, '2023-04-28 16:48:55'),
(2, 'Погоджуюся на всі 100', 1, '2023-04-28 16:49:45'),
(3, 'Було цікаво!', 1, '2023-04-29 16:51:29');

-- --------------------------------------------------------

--
-- Структура таблицы `posts`
--

CREATE TABLE `posts` (
  `id` int NOT NULL,
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `user_id` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `posts`
--

INSERT INTO `posts` (`id`, `title`, `description`, `created_at`, `user_id`) VALUES
(1, 'GitHub', 'GitHub — один з найбільших вебсервісів для спільної розробки програмного забезпечення. Існують безкоштовні та платні тарифні плани користування сайтом. Базується на системі керування версіями Git і розроблений на Ruby on Rails і Erlang компанією GitHub, Inc (раніше Logical Awesome).\r\n\r\nСервіс безкоштовний для проєктів з відкритим вихідним кодом, з наданням користувачам усіх своїх можливостей (включаючи SSL), а для окремих індивідуальних проєктів пропонуються різні платні тарифні плани.\r\n\r\n21 вересня 2011 року кількість користувачів стала більшою за мільйон.\r\n\r\nРозробники сайту називають GitHub «соціальною мережею для розробників».\r\n\r\nОкрім розміщення коду, учасники можуть спілкуватись, коментувати редагування один одного, а також слідкувати за новинами знайомих. За допомогою широких можливостей Git програмісти можуть поєднувати свої репозиторії — GitHub дає зручний інтерфейс для цього і може показувати вклад кожного учасника в вигляді дерева.\r\n\r\nДля проєктів є особисті сторінки, невеликі Вікі та система відстеження помилок. Прямо на сайті можна дивитись файли проєктів з підсвічуванням синтаксису для більшості мов програмування.\r\n\r\nНа платних тарифних планах можна створювати приватні репозиторії, доступні обмеженому колу користувачів.\r\nЄ можливість прямого додавання нових файлів в свій репозиторій через вебінтерфейс сервісу\r\nКод проєктів можна не лише скопіювати через Git, але й завантажити у вигляді архіву. (Для цього достатньо додати /zipball/master/ в кінець адресного рядка.)\r\nОкрім Git, сервіс підтримує отримання і редагування коду через SVN[12][13] і Mercurial.\r\nНа сайті є pastebin-сервіс[14] для швидкої публікації фрагментів коду.\r\nЗберігання документації, включаючи автоматично відтворювані файли README у різних форматах файлів типу Markdown.\r\nВкладені списки завдань у файлах\r\nВізуалізація геопросторових даних\r\n3D-рендеринг файлів, які можна попередньо переглянути, використовуючи новий інтегрований переглядач файлів STL, який відображає файли на «3D canvas». Переглядач підтримує WebGL і Three.js.\r\nВнутрішній формат PSD для Photoshop з можливістю попередньо перегляду та порівняння з попередніми версіями того самого файлу.\r\nРаніше Ruby-проєкти могли бути автоматично опубліковані в RubyGems-репозиторії сервісу, але в жовтні 2009 GitHub відмовився від цього сервісу.', '2023-03-22 10:13:37', 2),
(5, 'PHPUnit', 'PHPUnit — фреймворк для модульного тестування під час розробки ПЗ на PHP. Є представником сімейства фреймворків XUnit[en] на основі пакету SUnit, створеного Кентом Беком. PHPUnit розроблений Себастьяном Бергманом.\r\n\r\nPHPUnit був створений з позиції - чим раніше ви виявите помилки в коді, тим швидше ви зможете їх виправити. Як і всі фреймворки модульного тестування PHPUnit використовує твердження для перевірки, що поведінка одиниці тестованого коду поводиться як і очікувалося.\r\n\r\nPHPUnit надає програмісту такі можливості:\r\n\r\nІнструменти для створення модульних тестів і організації їх в ієрархічні набори.\r\nІнтерфейс командного рядка для тестування\r\nПостачальники даних — генератори для тестування даних для перевірки, як єдиний тест поводиться на різних вхідних даних.\r\nПідтримка тестування коду, що використовує базу даних.\r\nМожливість тестування винятків.\r\nПідтримка так званих фіктивних об\'єктів\r\nГенератор звітів\r\nІнтеграція з інструментом Selenium RC для тестування користувальницьких інтерфейсів', '2023-01-17 11:27:50', 5),
(6, 'СИСТЕМИ КОНТРОЛЮ ВЕРСІЙ НА ПРИКЛАДІ GIT', 'Що таке системи контролю версій?\r\nУ наш час розробка програмного забезпечення проходить за безмежною кількістю методик щодо розподілу задач у великих і малих командах. Але як може команда розробляти продукт на одній й тій самій кодовій базі? Саме для цього був розроблений один із найважливіших інструментів розробки - VCS або Version Control System. Окрім Git (розподілена система управління версіями) - найбільш популярної на цей час системи, є декілька інших - SVN, Mercurial тощо. На кафедрі Комп\'ютерних наук ми намагаємося опанувати дану технологією.\r\n\r\nПриклади використання\r\nЯкщо декілька розробників працюють над один й тим самим додатком, іноді одним і тим самим файлом або навіть у суміжних строках, Git дозволяє фіксувати зміни паралельно за допомогою декілька бранчей (branch), а потім зливати усі зміні в один бранч, наприклад основну кодову базу. Альтернативою без контролю версій було би збереження змін у кожного розробника локально, а потім вручную змішування змін на девайсі одного із них.\r\n\r\nОкремою перевагою є можливість порівняти зміни за допомогою утиліти diff (або git diff), що дозволяє бачити лише зміни без порівняння усіх файлів.\r\n\r\nСтруктура\r\nGit не є централізованим сервером як файлові сервера. Замість цього він є розподіленим (distributed), тобто він може зберігатися одночасно локально та на серверах сервісів таких як GitHub, BitBucket, GitLab тощо. Виглядає він як звичайна директорія з файлам, за виключенням наявності директорії “.git”, що зберігає зміни за допомогою різниць тобто diff-ів. Тобто якщо в історії змін є великий файл, то Git не зберігає його копії, а тільки різницю між його станом до й після зміни. Ця директорія називається репозиторій.\r\n\r\nПісля деяких змін стан файлів фіксується за допомогою коммітів (commit). Комміт це контрольна точка у історії змін, наприклад комміт включає у себе зміну 3 файлів, створення 2 інших файлів, видалення одного файлу.\r\n\r\nДля організації коммітів використовуються бранчі та теги. Бранчі - це вказівники на певний комміт, що змінюється при додавання інших. Вони використовуються при розробці версії або певної фічі. Коли приближається час релизу, розробник створює тег, що не відміну від бранча не може бути зміненим. Теги звичайно мають маркування як і версії ПЗ.\r\n\r\nОперації\r\nGit дозволяє полегшити життя розробника за допомогою повністю або частково автоматичних операцій:\r\n\r\nоперації commit/push/pull/fetch забезпечують додавання та синхронізацію змін між локальним та віддаленими репозиторіями;\r\nоперації merge/rebase/cherry-pick надають можливість змішувати зміни між бранчами;\r\nоперації status/log надають можливість слідкувати за змінами у проекті;\r\nоперації checkout/revert/reset забезпечують відміну змін та навігацію між коммітами, тегами або бранчами.\r\nДодаткові функції Git сервісів\r\nКрім звичайних команд, Git сервера такі як GitHub, GitLab тощо мають можливості:\r\n\r\nстворення та зберігання релізів, тобто файлів для використання ПЗ (наприклад .exe файл для встановлення на Windows);\r\nстворення issues, тобто тікетів на будь-яку проблему або нову фічу для ПЗ;\r\nстворення pull request (merge request для GitLab), що дозволяє перед додаванням змін у основний бранч надати іншому розробнику можливість перевірити ваш код, запропонувати поліпшення тощо.', '2023-04-22 11:57:40', 5),
(7, 'Bootstrap', 'Bootstrap — це безкоштовний набір інструментів з відкритим кодом, призначений для створення вебсайтів та вебзастосунків, який містить шаблони CSS та HTML для типографіки, форм, кнопок, навігації та інших компонентів інтерфейсу, а також додаткові розширення JavaScript. Він спрощує розробку динамічних вебсайтів і вебзастосунків.\r\n\r\nBootstrap — це клієнтський фреймворк, тобто інтерфейс для користувача, на відміну від коду серверної сторони, який знаходиться на сервері. Репозиторій із цим фреймворком є одним із найпопулярніших на GitHub.[3] Серед інших, його використовують NASA і MSNBC.\r\nBootstrap має модульну структуру і складається переважно з наборів таблиць стилів LESS, які реалізують різні компоненти цього набору інструментів. Розробники можуть самостійно налаштовувати файли Bootstrap, обираючи компоненти для свого проекту.\r\n\r\nОсновні інструменти Bootstrap:\r\n\r\nСітки (grid) — наперед задані, готові до використання колонки\r\nШаблони (template) — фіксовані чи адаптивні шаблони сторінок\r\nТипографіка (typography) — опис та визначення класів для шрифтів, таких як шрифти для коду, цитат тощо\r\nМультимедіа (media) — засоби управління зображеннями та відео\r\nТаблиці (table) — засоби оформлення таблиць, які зокрема забезпечують сортування\r\nФорми (form) — класи для оформлення як форм, так і деяких подій\r\nНавігація (nav, navbar) — класи для оформлення вкладок, сторінок, меню і панелей навігації\r\nСповіщення (alert) — класи для оформлення діалогових вікон, підказок і спливаючих вікон\r\nІконочний шрифт (icon font) — набір іконок у вигляді шрифту, складається майже з 500 компонентів.\r\n', '2023-06-22 00:00:00', 2),
(8, '11111', '22222222222222222222', '2023-06-22 00:00:00', 12),
(9, '9', 'jge\'gerkgrpker[', '2023-06-22 00:00:00', 12);

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int NOT NULL,
  `name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `password`) VALUES
(2, 'nakov', 'qaz@qaz.com', '1'),
(3, 'maria', '', ''),
(4, 'ani', '', ''),
(5, 'joe', '', ''),
(6, 'test', '', ''),
(7, 'it\'s security \"test\"<br>', '', ''),
(8, 'vikash', '', ''),
(9, 'vlad', 'q@q.com', '9'),
(12, 'q', 'q1@q.com', '2');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`),
  ADD KEY `id_post` (`id_post`);

--
-- Индексы таблицы `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk_users_posts_idx` (`user_id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username_UNIQUE` (`name`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT для таблицы `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `comments`
--
ALTER TABLE `comments`
  ADD CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`id_post`) REFERENCES `posts` (`id`);

--
-- Ограничения внешнего ключа таблицы `posts`
--
ALTER TABLE `posts`
  ADD CONSTRAINT `fk_users_posts` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
